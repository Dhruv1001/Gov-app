  server.js
// app.post('/api/login', async (req, res) => {
//   const { username, password, role } = req.body;

//   try {
//     // Find user in the database
//     const user = await User.findOne({ username });
//     if (!user && !role) {
//       return res.status(401).json({ message: 'Invalid username or password Or Tring To Login In Others role' });
//     }

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(401).json({ message: 'Invalid username or password' });
//     }

//     // Generate JWT Token
//     const token = jwt.sign({ username: user.username, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });

//     res.status(200).json({ message: 'Login successful', token, role: user.role });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/register', async (req, res) => {
//   const { fullname, username, password, role } = req.body;

//   if (!fullname || !username || !password || !role) {
//     return res.status(400).json({ message: 'All fields are required' });
//   }

//   try {
//     // Check if username exists
//     const existingUser = await User.findOne({ username });
//     if (existingUser) {
//       return res.status(400).json({ message: 'Username already exists' });
//     }

//     // Hash password
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // Create user
//     const newUser = new User({ fullname, username, password: hashedPassword, role });
//     await newUser.save();

//     res.status(201).json({ message: 'Registration successful' });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Error registering user' });
//   }
// });

updated server.js 


// const express = require('express');
// const mongoose = require('mongoose');
// const cors = require('cors');
// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');
// require('dotenv').config({ path: './.env' });

//  const authMiddleware = require('../Middleware/middleware');

// const app = express();

// // Middleware
// app.use(express.json());
// app.use(cors());

// // MongoDB Connection
// mongoose.connect('mongodb://localhost:27017/SupremeCourt', {
//   useNewUrlParser: true,
//   useUnifiedTopology: true,
// })
//   .then(() => console.log('✅ Connected to MongoDB (SupremeCourt)'))
//   .catch((err) => console.error('❌ MongoDB connection error:', err));

// // Define Schemas for Clients, Judges, and Lawyers
// const userSchema = new mongoose.Schema({
//   fullname: { type: String, required: true },
//   username: { type: String, required: true, unique: true },
//   password: { type: String, required: true },
//   role: { type: String, required: true, enum: ['client', 'judge', 'lawyer'] }
// });

// // Define Models
// const Client = mongoose.model('clients', userSchema);
// const Judge = mongoose.model('judges', userSchema);
// const Lawyer = mongoose.model('lawyers', userSchema);

// // Authentication Middleware
// //  const authMiddleware = (req, res, next) => {
// //   const authHeader = req.header("Authorization");

// //   if (!authHeader || !authHeader.startsWith("Bearer ")) {
// //     return res.status(401).json({ message: "Access denied. No token provided." });
// //   }

// //   const token = authHeader.split(" ")[1]; // Extract token
// //   try {
// //     const decoded = jwt.verify(token, process.env.JWT_SECRET);
// //     req.user = decoded;
// //     next();
// //   } catch (err) {
// //     return res.status(401).json({ message: "Invalid token." });
// //   }
// // };

// // ✅ Role-based Registration
// app.post('/api/register', async (req, res) => {
//   const { fullname, username, password, role } = req.body;

//   if (!fullname || !username || !password || !role) {
//     return res.status(400).json({ message: 'All fields are required' });
//   }

//   try {
//     // Check if username exists in any role schema
//     const existingUser = await Promise.all([
//       Client.findOne({ username }),
//       Judge.findOne({ username }),
//       Lawyer.findOne({ username })
//     ]);

//     if (existingUser.some(user => user)) {
//       return res.status(400).json({ message: 'Username already exists' });
//     }

//     // Hash password
//     const hashedPassword = await bcrypt.hash(password, 10);
//     let newUser;

//     if (role === 'client') {
//       newUser = new Client({ fullname, username, password: hashedPassword, role });
//     } else if (role === 'judge') {
//       newUser = new Judge({ fullname, username, password: hashedPassword, role });
//     } else if (role === 'lawyer') {
//       newUser = new Lawyer({ fullname, username, password: hashedPassword, role });
//     } else {
//       return res.status(400).json({ message: 'Invalid role' });
//     }

//     await newUser.save();
//     res.status(201).json({ message: 'Registration successful' });

//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Error registering user' });
//   }
// });

// // ✅ Role-based Login (Returns JWT Token)
// app.post('/api/log', async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     // Find user across all role collections
//     const user = await Promise.all([
//       Client.findOne({ username }),
//       Judge.findOne({ username }),
//       Lawyer.findOne({ username })
//     ]).then(results => results.find(user => user)); // Get the first non-null result

//     if (!user) {
//       return res.status(401).json({ message: 'Invalid username or password' });
//     }

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(401).json({ message: 'Invalid username or password' });
//     }

//     // Generate JWT Token
//     const token = jwt.sign({ username: user.username, role: user.role }, process.env.JWT_SECRET, { expiresIn: "2h" });

//     res.status(200).json({ message: 'Login successful', token, role: user.role });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // ✅ Protected Dashboard Route (For Any Role)
// // app.get('/api/dashboard', authMiddleware, (req, res) => {
// //   res.status(200).json({ message: `Welcome ${req.user.username} (${req.user.role})`, user: req.user });
// // });
// app.post('/api/dashboard', authMiddleware, (req, res) => {
//   res.status(200).json({ message: `Welcome ${req.user.username} (${req.user.role})`, user: req.user });
// });


// // ✅ Start the Server
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));



login.js


// import React, { useState, useEffect } from 'react';
// import axios from 'axios';
// import './logins.css';
// import { useNavigate } from 'react-router-dom';

// function Login() {
//   const [currentPanel, setCurrentPanel] = useState('');
//   const [formData, setFormData] = useState({ username: '', password: '' });
//   const [errorMessage, setErrorMessage] = useState('');
//   const [loading, setLoading] = useState(false);
//   const navigate = useNavigate();

//   useEffect(() => {
//     // Redirect if already logged in
//     const token = localStorage.getItem('token');
//     if (token) {
//       navigate(`/${currentPanel}DashB`);
//     }
//   }, [navigate, currentPanel]);

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const { username, password } = formData;

//     if (!username || !password) {
//       setErrorMessage('Please fill in all fields');
//       return;
//     }

//     setErrorMessage('');
//     setLoading(true);

//     try {
//       const response = await axios.post('http://localhost:5000/api/log', { username, password, role: currentPanel });

//       if (response.data && response.data.message === 'Login successful') {
//         alert('Login successful!');
        
//         // Store the JWT token in localStorage
//         localStorage.setItem('token', response.data.token);
        
//         // Redirect to the appropriate dashboard
//         navigate(`/${currentPanel}DashB`);
//       } else {
//         setErrorMessage('Invalid username or password');
//       }
//     } catch (err) {
//       setErrorMessage('Login failed: ' + err.response?.data?.message || err.message);
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prevData) => ({
//       ...prevData,
//       [name]: value,
//     }));
//   };

//   return (
//     <div className="App">
//       <div className="button-container">
//         <button onClick={() => setCurrentPanel('Client')}>Client</button>
//         <button onClick={() => setCurrentPanel('Judge')}>Judge</button>
//         <button onClick={() => setCurrentPanel('Lawyer')}>Lawyer</button>
//       </div>

//       <div className="panel">
//         <h2>{currentPanel.charAt(0).toUpperCase() + currentPanel.slice(1)} Login</h2>
//         <p>Please Enter Your Credentials.</p>

//         <form onSubmit={handleSubmit}>
//           <div className="form-group">
//             <label>Username</label>
//             <input type="text" name="username" value={formData.username} onChange={handleChange} placeholder="Enter your username" />
//           </div>

//           <div className="form-group">
//             <label>Password</label>
//             <input type="password" name="password" value={formData.password} onChange={handleChange} placeholder="Enter your password" />
//           </div>

//           {errorMessage && <div className="error-message">{errorMessage}</div>}

//           <button type="submit" disabled={loading}>
//             {loading ? 'Logging in...' : 'Login'}
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default Login;

registor.js 
// import React, { useState } from 'react';
// import axios from 'axios';
// import './logins.css';

// function Register() {
//   const [currentPanel, setCurrentPanel] = useState('client');
//   const [formData, setFormData] = useState({ fullname: '', username: '', password: '' });
//   const [errorMessage, setErrorMessage] = useState('');

//   const panelData = {
//     client: {
//       title: 'Client',
//       description: 'Enter Details carefully.'
//     },
//     judge: {
//       title: 'Judge',
//       description: 'Enter Details carefully.'
//     },
//     lawyer: {
//       title: 'Lawyer',
//       description: 'Enter Details carefully.'
//     }
//   };

//   // Form submit handler
//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const { fullname, username, password } = formData;

//     // Simple validation
//     if (!fullname || !username || !password) {
//       setErrorMessage('Please fill in all fields');
//       return;
//     }

//     setErrorMessage('');

//     try {
//       // Make a POST request to the server with the form data
//       const response = await axios.post('http://localhost:5000/api/clients', {
//         fullname,
//         username,
//         password,
//       });

//       // Check if login is successful (adjust according to your API response)
//       if (response.data) {
//         alert('Registration successful!');
//         // Handle successful login (e.g., redirect to another page)
//       }
//     } catch (err) {
//       setErrorMessage('Registration failed');
//     }
//   };

//   // Handle form input changes
//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prevData) => ({
//       ...prevData,
//       [name]: value
//     }));
//   };

//   return (
//     <div className="App">
//       <div className="button-container">
//         <button onClick={() => setCurrentPanel('client')}>Client</button>
//         <button onClick={() => setCurrentPanel('judge')}>Judge</button>
//         <button onClick={() => setCurrentPanel('lawyer')}>Lawyer</button>
//       </div>

//       <div className="panel">
//         <h2>{panelData[currentPanel].title}</h2>
//         <p>{panelData[currentPanel].description}</p>

//         <h3>Regsiter</h3>
//         <form onSubmit={handleSubmit}>
//           <div className="form-group">
//             <label>Full Name</label>
//             <input
//               type="text"
//               name="fullname"
//               value={formData.fullname}
//               onChange={handleChange}
//               placeholder="Enter your full name"
//             />
//           </div>

//           <div className="form-group">
//             <label>Username</label>
//             <input
//               type="text"
//               name="username"
//               value={formData.username}
//               onChange={handleChange}
//               placeholder="Enter your username"
//             />
//           </div>

//           <div className="form-group">
//             <label>Password</label>
//             <input
//               type="password"
//               name="password"
//               value={formData.password}
//               onChange={handleChange}
//               placeholder="Enter your password"
//             />
//           </div>

//           {errorMessage && <div className="error-message">{errorMessage}</div>}

//           <button type="submit">Sign Up</button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default Register;
   