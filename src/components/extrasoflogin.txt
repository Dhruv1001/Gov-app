// import React, { useState } from 'react';
// import axios from 'axios';
// import './logins.css';
// import { useNavigate } from 'react-router-dom';  



// function Login() {
//   const [currentPanel, setCurrentPanel] = useState('client');
//   const [formData, setFormData] = useState({ fullname: '', username: '', password: '' });
//   const [errorMessage, setErrorMessage] = useState('');

//   const panelData = {
//     client: {
//       title: 'Client',
//       description: 'Please Enter Your Credentials.'
//     },
//     judge: {
//       title: 'Judge',
//       description: 'Please Enter Your Credentials'
//     },
//     lawyer: {
//       title: 'Lawyer',
//       description: 'Please Enter Your Credentials'
//     }
//   };
//   const navigate = useNavigate();
//   // Form submit handler
//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     const { username, password } = formData;

//     // Simple validation
//     if (!username || !password) {
//       setErrorMessage('Please fill in all fields');
//       return;
//     }

//     setErrorMessage('');

//     try {
//       // Make a POST request to the server with the form data
//       const response = await axios.post('http://localhost:5000/api/login', {
//         username,
//         password,
//       });

//       // Check if login is successful (adjust according to your API response)
//       if (response.data) {
//         alert('Login successful!');
//         // Handle successful login (e.g., redirect to another page)

//         navigate('/Casedoc');  // Redirect to the dashboard page
//       }
//     } catch (err) {
//       setErrorMessage('Login failed: ' + err.message);
//     }
//   };

//   // Handle form input changes
//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prevData) => ({
//       ...prevData,
//       [name]: value
//     }));
//   };

//   return (
//     <div className="App">
//       <div className="button-container">
//         <button onClick={() => setCurrentPanel('client')}>Client</button>
//         <button onClick={() => setCurrentPanel('judge')}>Judge</button>
//         <button onClick={() => setCurrentPanel('lawyer')}>Lawyer</button>
//       </div>

//       <div className="panel">
//         <h2>{panelData[currentPanel].title}</h2>
//         <p>{panelData[currentPanel].description}</p>

//         <h3>Login</h3>
//         <form onSubmit={handleSubmit}>
//           <div className="form-group">
//             <label>Username</label>
//             <input
//               type="text"
//               name="username"
//               value={formData.username}
//               onChange={handleChange}
//               placeholder="Enter your username"
//             />
//           </div>

//           <div className="form-group">
//             <label>Password</label>
//             <input
//               type="password"
//               name="password"
//               value={formData.password}
//               onChange={handleChange}
//               placeholder="Enter your password"
//             />
//           </div>

//           {errorMessage && <div className="error-message">{errorMessage}</div>}

//           <button type="submit">Login</button>
//         </form>
//       </div>
//     </div>
//   );
// }

// export default Login;
   





   server.js extrars


   



// const express = require('express');
// const mongoose = require('mongoose');
// // const bcrypt = require('bcryptjs');
// // const jwt = require('jsonwebtoken');
// const bodyParser = require('body-parser');
// const cors = require('cors');
// require('dotenv').config();

// // Models
// const User = require('../models/client');

// const app = express();

// // Middleware
// app.use(cors());
// app.use(bodyParser.json());

// // MongoDB connection
// mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
//   .then(() => console.log('Connected to MongoDB'))
//   .catch((error) => console.log('Error connecting to MongoDB:', error));

// // Login route (POST)
// app.post('/login', async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     // Find user by username
//     const user = await User.findOne({ username });

//     if (!user) {
//       return res.status(400).json({ message: 'User not found' });
//     }

//     // Check if the password is correct
//     const isMatch = await bcrypt.compare(password, user.password);

//     if (!isMatch) {
//       return res.status(400).json({ message: 'Invalid credentials' });
//     }

//     // Generate JWT token
//     const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

//     // Send the token in the response
//     res.json({ token });
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Register route (POST) - Just for testing, you can skip in production
// app.post('/register', async (req, res) => {
//   const { fullname, username, password } = req.body;

//   try {
//     const existingUser = await User.findOne({ username });
//     if (existingUser) {
//       return res.status(400).json({ message: 'Username already exists' });
//     }

//     const hashedPassword = await bcrypt.hash(password, 10);
//     const newUser = new User({ fullname, username, password: hashedPassword });

//     await newUser.save();
//     res.status(201).json({ message: 'User registered successfully' });
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Start the server
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//   console.log(`Server running on port ${PORT}`);
// });






// const express = require('express');
// const mongoose = require('mongoose');
// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');
// const bodyParser = require('body-parser');
// const cors = require('cors');
// require('dotenv').config();

// const userSchema = new mongoose.Schema({
//   fullname: {
//     type: String,
//     required: true
//   },
//   username: {
//     type: String,
//     required: true,
//     unique: true
//   },
//   password: {
//     type: String,
//     required: true
//   }
// });

// const User = mongoose.model('User', userSchema);

// module.exports = User;

// // Models
// const user = require('./models/user');

// const app = express();

// // Middleware
// app.use(cors());
// app.use(bodyParser.json());

// // MongoDB connection
// mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
//   .then(() => console.log('Connected to MongoDB'))
//   .catch((error) => console.log('Error connecting to MongoDB:', error));

// // Register route (POST) - To register a new user
// app.post('/register', async (req, res) => {
//   const { fullname, username, password } = req.body;

//   try {
//     // Check if user already exists
//     const existingUser = await User.findOne({ username });
//     if (existingUser) {
//       return res.status(400).json({ message: 'Username already exists' });
//     }

//     // Hash password
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // Create new user
//     const newUser = new User({ fullname, username, password: hashedPassword });

//     // Save the user to the database
//     await newUser.save();
    
//     res.status(201).json({ message: 'User registered successfully' });
//   } catch (error) {
//     console.log(error);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Login route (POST) - To authenticate a user
// app.post('/login', async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     // Find the user by username
//     const user = await User.findOne({ username });
//     if (!user) {
//       return res.status(400).json({ message: 'User not found' });
//     }

//     // Compare the password with the stored hash
//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(400).json({ message: 'Invalid credentials' });
//     }

//     // Generate JWT token
//     const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

//     // Send the token in the response
//     res.json({ token });
//   } catch (error) {
//     console.log(error);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Start the server
// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//   console.log(`Server running on port ${PORT}`);
// });

